#!/usr/bin/env node

// Requires
var nodePath = require("path");
var program = require("commander");
var fse = require("fs-extra");
var downloadRepo = require("download-github-repo");
var util = require("util");


// Read package.json
var pkg = require("../package.json");

// Define temporary path
var tmpPath = nodePath.resolve(process.cwd(), ".ngx-boilerplates");


program
  .version(pkg.version);


/**
 * Init command
 *
 * Initialize a new project boilerplate
 */
program
  .command("init [path]")
  .usage("initializes a new Angular Express project in path(default path: current directory).\n  See available boilerplates at https://github.com/ngx-boilerplates")
  .option("-b, --boilerplate <github-username/repo>", "use a github repo as a boilerplate", "ngx-boilerplates/default")
  .option("-f, --force", "overwrite existing file(s)")
  .description("Initialize a new Angular Express project in path (default path: current directory)")
  .action(function (path, program) {

    var projectPath = nodePath.resolve(process.cwd(), path || "");
    var repo = program.boilerplate;

    removeTmpDirectory();

    // Prefix repo with 'ngx-boilerplates/' if it has no slash
    repo.match(/\//) || (repo = "ngx-boilerplates/" + repo);

    var done = function () {
      cleanUp();
      console.log("Initialized project at", projectPath)
    }

    fse.mkdirp(projectPath, function (err) {

      if (err) abort(err);

      fse.readdir(projectPath, function (err, contents) {

        if (err) abort(err);

        if ((contents.length !== 0) && (!program.force)) {
          console.log("Aborted for safety reasons: ");
          console.log(projectPath + " does not seem to be empty.");
          console.log('Use --force to overwrite existing file(s)');
          abort();
        }

        console.log("Downloading boilerplate: https://github.com/" + repo);

        downloadRepo(repo, tmpPath, function (err) {

          if (err) {
            if (util.isError(err) && err['code'] === 'ENOTFOUND') {
              abort("You're not connected to the Internet :-(");
            } else {
              abort("Boilerplate not found: https://github.com/" + repo);
            }
          }

          fse.copy(nodePath.resolve(tmpPath, "ngx"), projectPath, function (err) {
            if (err) {
              if (util.isError(err) && err['code'] === 'ENOENT') {
                abort("The boilerplate does not seem to contain an 'ngx' directory. This problem is caused by the boilerplate maintainer. Please contact the maintainer to have the issue fixed.");
              } else {
                abort("Boilerplate not found: https://github.com/" + repo + " (" + err + ")");
              }
            }
            return done()
          });

        });

      });
    });
  });

/**
 * Install command
 *
 * Install a new component
 */
program
  .command("install <component> [path]")
  .usage("initializes a new Angular Express component in path (default path: public/components).\n  See available components at https://github.com/ngx-components")
  .description("Initialize a new Angular Express project in path (default path: public/components)")
  .action(function (component, path, program) {

    var componentPath,
        repo = component;

    cleanUp();

    // Prefix repo with 'ngx-components/' if it has no slash
    repo.match(/\//) || (repo = "ngx-components/" + repo);

    if(path){
      componentPath = nodePath.resolve(process.cwd(), "public/components/", path);
    }else{
      var repoParts = repo.split('/');
      componentPath = nodePath.resolve(process.cwd(), "public/components/", repoParts[repoParts.length -1]);
    }

    var done = function () {
      cleanUp();
      console.log("Installed component at", componentPath)
    }

    fse.mkdirp(componentPath, function (err) {
      if (err) return err

      fse.readdir(componentPath, function (err, contents) {
        if (err) return err

        if ((contents.length !== 0) && (!program.force)) {
          console.log("Aborted for safety reasons: ");
          console.log(componentPath + " does not seem to be empty.");
          console.log('Use --force to overwrite existing file(s)');
          abort();
        }

        console.log("Downloading component: https://github.com/" + repo);

        downloadRepo(repo, tmpPath, function (err) {

          if (err) {
            if (util.isError(err) && err['code'] === 'ENOTFOUND') {
              abort("You're not connected to the Internet :-(");
            } else {
              abort("Component not found: https://github.com/" + repo);
            }
          }

          fse.copy(nodePath.resolve(tmpPath, "ngx"), componentPath, function (err) {
            if (err) {
              if (util.isError(err) && err['code'] === 'ENOENT') {
                abort("The component does not seem to contain an 'ngx' directory. This problem is caused by the component maintainer. Please contact the maintainer to have the issue fixed.");
              } else {
                abort("Component not found: https://github.com/" + repo + " (" + err + ")");
              }
            }
            return done()
          });

        });

      });
    });
  });

/**
 * Help text
 */
program.on("--help", function () {
  console.log("  Use 'ngx <command> --help' to get more information or visit http://angular-express.com/ to learn more.")
  console.log('')
});

program.parse(process.argv)

if (program.args.length < 1) {
  program.help()
}

/**
 * Clean up
 */
function cleanUp() {
  removeTmpDirectory();
}


/**
 * Remove the temporary directory
 */
function removeTmpDirectory() {
  fse.removeSync(tmpPath);
}

/**
 * Exit with the given error.
 *
 * @param {String|Error} error
 */

function abort(err) {
  cleanUp();
  if (util.isError(err)) {
    console.error(err.message);
  } else if (err) {
    console.error(err);
  }
  process.exit(1);
}